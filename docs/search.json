[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"\n\n\nbook collection lecture notes covering syllabus DATA ANALYSIS USING STATISTICAL PACKAGES course (STAT 531) Post Graduate programme Kerala Agricultural University\n","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"\n\nNote: book published MeLoN (Module e-Learning & Online Notes) . online version book free read .\n\nfeedback, please feel free contact Dr.Pratheesh P. Gopinath. E-mail: pratheesh.pg@kau.Thank !\n","code":""},{"path":"syllabus.html","id":"syllabus","chapter":"Syllabus","heading":"Syllabus","text":"","code":""},{"path":"syllabus.html","id":"objective","chapter":"Syllabus","heading":"Objective","text":"course meant exposing students usage various statistical\npackages analysis data. provide students hands experience \nanalysis research data. course useful disciplines.","code":""},{"path":"syllabus.html","id":"unit-i","chapter":"Syllabus","heading":"UNIT I","text":"Use Software packages : Summarization tabulation data; Descriptive\nstatistics; Graphical representation data, Exploratory data analysis.","code":""},{"path":"syllabus.html","id":"unit-ii","chapter":"Syllabus","heading":"UNIT II","text":"Fitting testing goodness fit discrete continuous probability\ndistributions; Testing hypothesis based large sample test statistics; Testing \nhypothesis using chi-square, t F statistics.","code":""},{"path":"syllabus.html","id":"unit-iii","chapter":"Syllabus","heading":"UNIT III","text":"Concept analysis variance covariance data single factor, multi-factor,\none-way multi-classified experiments, contrast analysis, multiple comparisons.","code":""},{"path":"syllabus.html","id":"unit-iv","chapter":"Syllabus","heading":"UNIT IV","text":"Analysis mixed models; Estimation variance components; Testing significance\ncontrasts; Correlation regression including multiple regression.","code":""},{"path":"syllabus.html","id":"unit-v","chapter":"Syllabus","heading":"UNIT V","text":"Discriminant function; Factor analysis; Principal component analysis; Analysis time\nseries data, Fitting non-linear models; Time series data.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"Data science fast growing field development advanced\nstatistical tools data analysis visualization. data\nvolume large also precision required, depend \nstatistical software get better insights data. Statistical\nsoftware makes analysis easy, produces precise results, enables us\nuse complex statistical tools generates advance complex graphical\noutputs.One blindly depend upon statistical software data analysis,\ncan use software data analysis per convenience.\nEven basic statistical tools, can perform calculations\nmanually. Without proper knowledge statistics, every software \ngarbage garbage . really matters knowledge \nstatistical concepts tools, effective interpretations can \nmade data.Agricultural experiments demand wide range statistical tools \nanalysis, includes exploratory analysis, design experiments,\nstatistical genetics. challenge scientists students\nfind suitable platform data analysis publish research\noutputs quality journals. software available data\nanalysis proprietary lack simple user interface. open\nsource programming language R associated ecosystem packages,\nprovides excellent platform data analysis yet, \nheavily utilized researchers agricultural disciplines.\nInsufficient programming computational knowledge primary\nchallenges agricultural researchers using R analysis.sessions, using R studio. believe , \nneed agricultural scientist students learn R programming\nlanguage, majority like data analyzed \nmake inference . seen agricultural researchers take R\nworkshops leave behind workshops mainly deals code\nchunks; user get easily tired . Beauty R , \nfree open-source software. Apart software used, insist\nstudents researchers strengthen basic statistics\nknowledge able decide, tool used\n. strongly recommend go basic\nstatistical theory visiting e-book Textbook Agricultural Statistics. proceeding , one\nalso basic knowledge different statistical software\navailable.","code":""},{"path":"introduction.html","id":"statistical-software","chapter":"1 Introduction","heading":"1.1 Statistical Software","text":"Statistical analysis software specialized programs designed allow\nusers perform complex statistical analysis. software typically\nprovide tools organization, interpretation, presentation \nselected data sets. Statistical analysis capabilities refer \ncapabilities support analysis methodologies regression\nanalysis, predictive analytics, statistical modelling, among many\nbasic tools.","code":""},{"path":"introduction.html","id":"types-of-statistical-software","chapter":"1 Introduction","heading":"1.1.1 Types of statistical software","text":"","code":""},{"path":"introduction.html","id":"open-source-software","chapter":"1 Introduction","heading":"1.1.1.1 Open-source software","text":"Open-source software (OSS) non-proprietary software allows\nanyone modify, enhance, simply view source code behind . \ncan enable programmers work collaborate projects created \ndifferent teams, companies, organizations. Open-source software\nauthors view creations proprietary instead release\nsoftware licenses grant users desire \nknow-view, copy, learn, alter, share code.OSS shared public repository, granting access anyone \nwants work source code. However, open-source software tends \ncome distribution license, establishes people can\ninteract, modify, share OSS.changes made source code, OSS signify \nchanges methods used make . Also, depending \nlicense, resulting OSS may may required free. \n, open-source software free require -front costs\nsubscription fees.open source software areR Rstudio (GUI interface development environment R)R Rstudio (GUI interface development environment R)gretl – gnu regression, econometrics time-series librarygretl – gnu regression, econometrics time-series libraryJASP – free software alternative IBM SPSS Statistics \nadditional option Bayesian methodsJASP – free software alternative IBM SPSS Statistics \nadditional option Bayesian methodsOrange - data mining, machine learning, bioinformatics\nsoftwareOrange - data mining, machine learning, bioinformatics\nsoftwareWeka (machine learning) – suite machine learning software\nwritten University WaikatoWeka (machine learning) – suite machine learning software\nwritten University WaikatoPerl Data Language – Scientific computing PerlPerl Data Language – Scientific computing Perl","code":""},{"path":"introduction.html","id":"public-domain","chapter":"1 Introduction","heading":"1.1.1.2 Public Domain","text":"Public domain software software legal, copyright \nediting restrictions associated . free open-source\nsoftware can publicly modified, distributed sold without \nrestrictions.Dataplot - public domain software system scientific\nvisualization statistical analysis. developed \nmaintained National Institute Standards \nTechnology. Dataplot's source code available public\ndomainDataplot - public domain software system scientific\nvisualization statistical analysis. developed \nmaintained National Institute Standards \nTechnology. Dataplot's source code available public\ndomainCSPro - CSPro short Census Survey Processing System,\npublic domain data processing software package developed \nU.S. Census Bureau ICF International.CSPro - CSPro short Census Survey Processing System,\npublic domain data processing software package developed \nU.S. Census Bureau ICF International.","code":""},{"path":"introduction.html","id":"freeware","chapter":"1 Introduction","heading":"1.1.1.3 Freeware","text":"Freeware software, often proprietary, distributed \nmonetary cost end user. agreed-upon set rights,\nlicense defines freeware unambiguously; every publisher defines \nrules freeware offers. instance, modification,\nredistribution third parties, reverse engineering permitted\npublishers prohibited others. Unlike free \nopen-source software, also often distributed free charge,\nsource code freeware typically made available. Freeware\nmay intended benefit producer , example, encouraging\nsales capable versionBV4.1- application software BV4.1 easy--use tool \ndecomposing seasonally adjusting monthly quarterly economic\ntime series version 4.1 Berlin procedure. \ndeveloped Federal Statistical Office Germany. software\nreleased freeware non-commercial purposes.BV4.1- application software BV4.1 easy--use tool \ndecomposing seasonally adjusting monthly quarterly economic\ntime series version 4.1 Berlin procedure. \ndeveloped Federal Statistical Office Germany. software\nreleased freeware non-commercial purposes.GeoDa - free software package conducts spatial data\nanalysis, geo-visualization, spatial autocorrelation spatial\nmodeling. Maintained 2016 Centre Spatial Data Science\n(CSDS) University Chicago, originally developed Spatial\nAnalysis Laboratory University Illinois \nUrbana-ChampaignGeoDa - free software package conducts spatial data\nanalysis, geo-visualization, spatial autocorrelation spatial\nmodeling. Maintained 2016 Centre Spatial Data Science\n(CSDS) University Chicago, originally developed Spatial\nAnalysis Laboratory University Illinois \nUrbana-ChampaignWinPepi - freeware package statistical programs \nepidemiologists, comprising seven programs 120 modules.WinPepi - freeware package statistical programs \nepidemiologists, comprising seven programs 120 modules.","code":""},{"path":"introduction.html","id":"proprietary-software","chapter":"1 Introduction","heading":"1.1.1.3.1 Proprietary software","text":"also known non-free software closed-source software, \ncomputer software software's publisher another person\nreserves licensing rights use, modify, share modifications, \nshare software, restricting user freedom software \nlease. opposite open-source free software. Non-free\nsoftware sometimes includes patent rights. well known\nproprietary statistical software :-SAS - SAS (previously \"Statistical Analysis System\") statistical\nsoftware suite developed SAS Institute data management, advanced\nanalytics, multivariate analysis, business intelligence, criminal\ninvestigation predictive analytics. SAS developed North\nCarolina State University 1966 1976, SAS Institute \nincorporated. SAS developed 1980s 1990s \naddition new statistical procedures, additional components \nintroduction JMP.SPSS Statistics – SPSS Statistics statistical software suite\ndeveloped IBM data management, advanced analytics, multivariate\nanalysis, business intelligence, criminal investigation. Long\nproduced SPSS Inc., acquired IBM 2009. Current versions\n(post 2015) brand name: IBM SPSS Statistics. software name\noriginally stood Statistical Package Social Sciences (SPSS),\nreflecting original market, later changed Statistical\nProduct Service Solutions.Stata – general-purpose statistical software package developed\nStataCorp data manipulation, visualization, statistics, \nautomated reporting. used researchers many fields, including\nbiomedicine, epidemiology, sociology science. Stata initially\ndeveloped Computing Resource Center California first\nversion released 1985. 1993, company renamed Stata\nCorporation, now known StataCorp.Genstat (General Statistics) - statistical software package \ndata analysis capabilities, particularly field agriculture. \ndeveloped 1968 Rothamsted Research United Kingdom \ndesigned provide modular design, linear mixed models graphic\nfunctions. developed distributed VSN International (VSNi),\nowned Numerical Algorithms Group Rothamsted\nResearch.Minitab – Minitab statistics package developed Pennsylvania\nState University researchers Barbara F. Ryan, Thomas . Ryan, Jr.,\nBrian L. Joiner conjunction Triola Statistics Company \n1972. began light version OMNITAB 80, statistical analysis\nprogram National Institute Standards Technology.MATLAB – MATLAB abbreviation \"MATrix LABoratory\" \nproprietary multi-paradigm programming language numeric computing\nenvironment developed MathWorks. MATLAB allows matrix manipulations,\nplotting functions data, implementation algorithms, creation\nuser interfaces, interfacing programs written \nlanguages.EViews – EViews statistical package Windows, used mainly \ntime-series oriented econometric analysis. developed \nQuantitative Micro Software (QMS). EViews can used general\nstatistical analysis econometric analyses, cross-section \npanel data analysis time series estimation forecasting. EViews\ncombines spreadsheet relational database technology \ntraditional tasks found statistical software, uses Windows GUI\n(Graphical User Interface).agricultural researchers recommend using RStudio data\nanalysis, easy use. RStudio allows users develop edit\nprograms R supporting large number statistical packages,\nhigher quality graphics, ability manage workspace. developed R package grapesAgri1 agricultural research. discussing package towards last session. read please see grapesAgri1","code":""},{"path":"introduction-to-r.html","id":"introduction-to-r","chapter":"2 Introduction to R","heading":"2 Introduction to R","text":"R programming language statistical computing graphics supported R Core Team R Foundation Statistical Computing. Created statisticians Ross Ihaka Robert Gentleman. R implementation S programming language. R used among data miners, bioinformaticians statisticians data analysis developing statistical software. Users created packages augment functions R language.\nAccording user surveys studies scholarly literature databases, R one commonly used programming languages used data mining. official R software environment open-source free software environment within GNU package, available GNU General Public License. written primarily C, Fortran, R (partially self-hosting). R command line interface. Multiple third-party graphical user interfaces also available, RStudio, integrated development environment.\nFigure 2.1: R logo\n","code":""},{"path":"introduction-to-r.html","id":"rstudio","chapter":"2 Introduction to R","heading":"2.1 Rstudio","text":"RStudio integrated development environment (IDE) R. includes console, syntax-highlighting editor supports direct code execution, well tools plotting, history, debugging workspace management. RStudio available open source commercial editions runs desktop (Windows, Mac, Linux) browser connected RStudio Server. RStudio free open-source integrated development environment (IDE) R, programming language statistical computing graphics. JJ Allaire, creator programming language ColdFusion, founded RStudio. RStudio available two editions: RStudio Desktop, program run locally regular desktop application; RStudio Server, allows accessing RStudio using web browser running remote Linux server.RStudio written C++ programming language uses Qt framework graphical user interface. Work RStudio started around December 2010, first public beta version (v0.92) officially announced February 2011.\nFigure 2.2: R studio logo\nTypical RStudio window four panes explained \nFigure 2.3: R studio window\nConsoleThis action happens. authentic R code typed ‘>’ prompt executed pressing ‘Enter’ generate output. going type single call function start app data analysis.SourceThis R scripts (collection code) can created edited. won’t using much .Environment|History|ConnectionsOne can browse internet know tabs interested, wont using much.Files|Plots|Packages|Help|ViewerWe interested install button pane, install packages required analysis.","code":""},{"path":"introduction-to-r.html","id":"installing-r-and-r-studio","chapter":"2 Introduction to R","heading":"2.2 Installing R and R studio","text":"First install R latest versionFirst install R latest versionThen install RstudioThen install Rstudiosee details install –> Click ","code":""},{"path":"introduction-to-r.html","id":"the-above-descriptions-are-sourced-from","chapter":"2 Introduction to R","heading":"The above descriptions are sourced from:","text":"R Project Statistical ComputingRStudioWikipedia R (programming language)Wikipedia RStudiograpesorchard.com","code":""},{"path":"rbase.html","id":"rbase","chapter":"3 R basics","heading":"3 R basics","text":"section dealing basic operations using R. One aware basics proceeding kind data analysis using R.RStudio interface simple. type R code bottom line RStudio console pane (see figure 2.3) click Enter run . code type called command, command computer something . line type called command line.‘#’ hashtag R\nR treats hashtag character, ’#’special way; R run anything follows hashtag line. makes hashtags useful adding comments annotations code. able read comments, computer process .","code":""},{"path":"rbase.html","id":"basic-arithmetic-operations","chapter":"3 R basics","heading":"3.1 Basic arithmetic operations","text":"colon operator (:) returns every integer two integers. easy way create sequence numbers.","code":"\n# Try these codes in R, Type these codes in console and hit enter\n# result of R code is also shown here  \n\n# + (Addition)   \n7 + 4  ## [1] 11\n# - (Subtraction)  \n7 - 4  ## [1] 3\n# * (Multiplication)\n7 * 2  ## [1] 14\n# / (division) \n7 / 2  ## [1] 3.5\n# ^ (exponentiation) \n7 ^ 2## [1] 49\n100:130##  [1] 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118\n## [20] 119 120 121 122 123 124 125 126 127 128 129 130"},{"path":"rbase.html","id":"basic-arithmetic-functions","chapter":"3 R basics","heading":"3.2 Basic arithmetic functions:","text":"","code":"\n# Logarithm to the base e  \nlog(4)  ## [1] 1.386294\n# Logarithm to the base 10  \nlog10(4)  ## [1] 0.60206\n# Logarithm to the base 2  \nlog2(4)  ## [1] 2\n# absolute value\nabs(-4)  ## [1] 4\n# square root\nsqrt(4) ## [1] 2"},{"path":"rbase.html","id":"assigning-values-to-variables","chapter":"3 R basics","heading":"3.3 Assigning values to variables","text":"Note R case sensitive, .e. x X equal.","code":"\nx <- 2\n# it is that value 2 is assigned to variable x  \n\ny <- 5  \n\n# it is that value 5 is assigned to variable y\n\n# Now if you give x+5 or using any operator between x and y, you can see as below  \n\nx + y  ## [1] 7\nx * y  ## [1] 10\nx / y  ## [1] 0.4\nx + 2*y  ## [1] 12"},{"path":"rbase.html","id":"basic-data-types","chapter":"3 R basics","heading":"3.4 Basic data types","text":"numericcharacterlogical","code":"\nmy_age <- 32   \n# Numeric variable 32 is assigned to my_age\n\n# while writing your code it is preffered to use '_' instead of space  \n\nmy_name <- \"Dr Pratheesh\" # Character variable  \n\n#  Are you a data scientist?: (yes/no) <=> (TRUE/FALSE)  \n\nis_datascientist <- TRUE # logical variable"},{"path":"rbase.html","id":"vectors","chapter":"3 R basics","heading":"3.4.1 Vectors","text":"combination multiple values (numeric, character logical)","code":""},{"path":"rbase.html","id":"how-to-create-a-vector","chapter":"3 R basics","heading":"How to create a vector","text":"Create vector: c() concatenateCase missing values: NA (available) NaN (number)Get subset vector: my_vector[] get ith elementCase missing values: NA (available) NaN (number)\nGet subset vector: my_vector[] get ith element","code":"\n# Create a numeric vector\nstudent_ages <- c(27, 25, 29, 26, 20, 21, 23, 25)  \n\n# Create a character vector\nstudent_name <- c(\"asha\", \"adhi\", \"aravind\", \n                  \"mary\", \"peter\", \"daisy\", \n                  \"papu\", \"ramu\")  \n\n# subset of a vector  \n\n# obtain 3 rd element from student_name  \n\nstudent_name[3]## [1] \"aravind\""},{"path":"rbase.html","id":"calculations-with-vectors","chapter":"3 R basics","heading":"Calculations with vectors","text":"max(x), min(x), range(x), length(x), sum(x), mean(x), prod(x): product elements x, sd(x): standard deviation, var(x): variance, sort(x)","code":"\n# Create a numeric vector\nstudent_ages <- c(27, 25, 29, 26, 20, 21, 23, 25)  \n\n# Maximum value of the vector\nmax(student_ages)## [1] 29\n# Minimum value of the vector\nmin(student_ages)## [1] 20\n# Range of the vector\nrange(student_ages)  ## [1] 20 29\n# Length of the vector\nlength(student_ages)  ## [1] 8\n# Total of the values in the vector\nsum(student_ages)## [1] 196\n# Mean of the vector\nmean(student_ages)  ## [1] 24.5\n# Product of the elements in the vector\nprod(student_ages)## [1] 122911425000\n# Standard deviation  \nsd(student_ages)## [1] 3.023716\n# Variance of the vector\nvar(student_ages)## [1] 9.142857\n# Sort the values of the vector\n\n# Ascending order\nsort(student_ages,decreasing = FALSE)## [1] 20 21 23 25 25 26 27 29\n# Descending order\nsort(student_ages,decreasing = TRUE)## [1] 29 27 26 25 25 23 21 20"},{"path":"rbase.html","id":"matrices","chapter":"3 R basics","heading":"3.4.2 Matrices","text":"’s homogeneous collection data sets arranged two dimensional organisation. ’s m*n array similar data type. created using vector input. fixed number rows columns. can perform many arithmetic operations R matrix like – addition, subtraction, multiplication, divisions.Create naming matrix: matrix(), cbind(), rbind(), rownames(), colnames()\nTranspose matrix: t()\nDimensions matrix: ncol(), nrow(), dim()\nGet subset matrix: my_data[row, col]\nCalculations numeric matrices: rowSums(), colSums(), rowMeans(), colMeans()","code":"\n# make three vectors c1, c2 and c3\nc1<-c(3,4,5)\nc2<-c(7,8,9)\nc3<-c(11,12,13)\n\n# Creating matrix by binding column wise  \nA <- cbind(c1,c2,c3)\nprint(A)##      c1 c2 c3\n## [1,]  3  7 11\n## [2,]  4  8 12\n## [3,]  5  9 13\n# Creating matrix by binding row wise  \nB <- rbind(c1,c2,c3)\nprint(B)  ##    [,1] [,2] [,3]\n## c1    3    4    5\n## c2    7    8    9\n## c3   11   12   13\n# Adding two matrices\nA+B##      c1 c2 c3\n## [1,]  6 11 16\n## [2,] 11 16 21\n## [3,] 16 21 26\n# Simple element by element multiplication up to matrices.\n\nA*B##      c1  c2  c3\n## [1,]  9  28  55\n## [2,] 28  64 108\n## [3,] 55 108 169\n# Matrix multiplication  \n\nA%*%B##      [,1] [,2] [,3]\n## [1,]  179  200  221\n## [2,]  200  224  248\n## [3,]  221  248  275\n# Using matrix() function\n# Elements are arranged sequentially by row.\nM <- matrix(c(3:14), nrow = 4, byrow = TRUE)\nprint(M)##      [,1] [,2] [,3]\n## [1,]    3    4    5\n## [2,]    6    7    8\n## [3,]    9   10   11\n## [4,]   12   13   14\n# Elements are arranged sequentially by column.\nN <- matrix(c(3:14), nrow = 4, byrow = FALSE)\nprint(N)##      [,1] [,2] [,3]\n## [1,]    3    7   11\n## [2,]    4    8   12\n## [3,]    5    9   13\n## [4,]    6   10   14\n# Define the column and row names.\nrownames = c(\"row1\", \"row2\", \"row3\", \"row4\")\ncolnames = c(\"col1\", \"col2\", \"col3\")\n\nP <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))\nprint(P)  ##      col1 col2 col3\n## row1    3    4    5\n## row2    6    7    8\n## row3    9   10   11\n## row4   12   13   14\n# Access the element at 3rd column and 1st row.\nP[1,3]## [1] 5\n# Access the element at 2nd column and 4th row.\nP[4,2]## [1] 13\n# Access only the  2nd row.\nP[2,]## col1 col2 col3 \n##    6    7    8\n# Access only the 3rd column.  \nP[,3]  ## row1 row2 row3 row4 \n##    5    8   11   14\n# Assign element at 1st row and 3rd column of matrix P to the variable x  \n\nx<-P[1,3]  \nprint(x)## [1] 5\n# create a vector from the second column of matrix P  \n\ny<-P[,2]\ny<-as.vector(y)\n\n#Transpose a matrix\nQ<-t(P)\nprint(Q)##      row1 row2 row3 row4\n## col1    3    6    9   12\n## col2    4    7   10   13\n## col3    5    8   11   14\n# Knowing dimensions of a matrix\n\n#Number of columns in A\nncol(A)  ## [1] 3\n#Number of rows in A\nnrow(A)## [1] 3\n# Number of rows and columns\ndim(A)  ## [1] 3 3\n# Calculations with numeric matrices  \n\n# Compute row sums of matrix A\nrowSums(A)  ## [1] 21 24 27\n# Compute column sums of matrix A\ncolSums(A)  ## c1 c2 c3 \n## 12 24 36\n# Compute row means of matrix A\nrowMeans(A)  ## [1] 7 8 9\n# Compute column means of matrix A\ncolMeans(A)## c1 c2 c3 \n##  4  8 12"},{"path":"rbase.html","id":"data-frames","chapter":"3 R basics","heading":"3.4.3 Data frames","text":"data frame data type, going use frequently. data frame like matrix can columns different types (numeric, character, logical). Rows observations (individuals) columns variables. Function data.frame() used create data frameTo check whether data data frame, use .data.frame() function. Returns TRUE data data frame:check whether data matrix, data frame class use function class()Convert data class data frame use function .data.frame()described matrix section, can use function t() transpose data frame:","code":"\nfriends_data <- data.frame(\n  name = c(\"asha\", \"adhi\", \"aravind\", \n                  \"mary\"), \n  age = c(20,23,22,21),\n  height = c(180, 170, 185, 169),\n  married = c(TRUE, FALSE, TRUE, TRUE)  \n)  \n\n# Print\nfriends_data##      name age height married\n## 1    asha  20    180    TRUE\n## 2    adhi  23    170   FALSE\n## 3 aravind  22    185    TRUE\n## 4    mary  21    169    TRUE\nis.data.frame(friends_data)  ## [1] TRUE\n# What is the class of A? --> matrix\nclass(A)  ## [1] \"matrix\" \"array\"\n# What is the class of friends_data? --> matrix\nclass(friends_data)## [1] \"data.frame\"\n# Convert it as a data frame\nA2 <- as.data.frame(A)\n# Now, the class is data.frame\nclass(A2)## [1] \"data.frame\"\nt(friends_data)##         [,1]   [,2]    [,3]      [,4]  \n## name    \"asha\" \"adhi\"  \"aravind\" \"mary\"\n## age     \"20\"   \"23\"    \"22\"      \"21\"  \n## height  \"180\"  \"170\"   \"185\"     \"169\" \n## married \"TRUE\" \"FALSE\" \"TRUE\"    \"TRUE\""},{"path":"rbase.html","id":"operations-on-data-frame","chapter":"3 R basics","heading":"3.4.3.1 Operations on data frame","text":"Positive indexing name locationNegative IndexingIndex characteristicsWe want select friends age greater equal 22.don’t want see column data selected rows just interested displaying, example, friend names age friends age >= 22, use following R code:’re finding selection statement starting inconvenient, can put row column selections variables first, :’s also possible use function subset() follow.Another option use functions attach() detach(). function attach() takes data frame makes columns accessible simply giving names.Extend data frame\nAdd new column data frameIt’s also possible use functions cbind() rbind() extend data frame.Calculations data frameWith numeric data frame, can use function rowSums(), colSums(), colMeans(), rowMeans() apply().apply() functionPractical 1: Matrices vectorsCreate vector numbers form 23 33Assign vector name “numbers”Create Matrix named “mat_num” elements 1 20 4 rows 5 columnsName columns rows matrix mat_num names likeCompute column means row means matrix mat_numAccess element second row third column matrix mat_num\nPractical 2: Data framesCreate data frame 10 students name, age (20 25), height degree.Select rows age 23Find mean total age\n","code":"\n# Access the data in 'name' column in friends_data\n# dollar sign is used\nfriends_data$name  ## [1] \"asha\"    \"adhi\"    \"aravind\" \"mary\"\n# or use this\nfriends_data[, 'name']  ## [1] \"asha\"    \"adhi\"    \"aravind\" \"mary\"\n# Subset columns 1 and 3\nfriends_data[ , c(1, 3)]  ##      name height\n## 1    asha    180\n## 2    adhi    170\n## 3 aravind    185\n## 4    mary    169\n# Subset columns 1 to 3  \nfriends_data[ , c(1:3)]    ##      name age height\n## 1    asha  20    180\n## 2    adhi  23    170\n## 3 aravind  22    185\n## 4    mary  21    169\n# Exclude column 1  \n\nfriends_data[, -1]  ##   age height married\n## 1  20    180    TRUE\n## 2  23    170   FALSE\n## 3  22    185    TRUE\n## 4  21    169    TRUE\n# Identify rows that meet the condition\nfriends_data$age >= 22   ## [1] FALSE  TRUE  TRUE FALSE\n# TRUE specifies that the row contains a value of age >= 22.\n# Select the rows that meet the condition\nfriends_data[friends_data$age >= 22, ]  ##      name age height married\n## 2    adhi  23    170   FALSE\n## 3 aravind  22    185    TRUE\n# The R code above, tells R to get all rows from friends_data where age >= 22\n# Use column locations\nfriends_data[friends_data$age >= 22,  c(1, 2)]  ##      name age\n## 2    adhi  23\n## 3 aravind  22\n# Or use column names\nfriends_data[friends_data$age >= 22, c(\"name\", \"age\")]##      name age\n## 2    adhi  23\n## 3 aravind  22\nage22 <- friends_data$age >= 22\ncols <- c(\"name\", \"age\")\n# Then you can select the rows and columns with those variables:\n\nfriends_data[age22, cols]##      name age\n## 2    adhi  23\n## 3 aravind  22\n# Select friends data with age >= 22\nsubset(friends_data, age >= 22)  ##      name age height married\n## 2    adhi  23    170   FALSE\n## 3 aravind  22    185    TRUE\n# Attach a data frame\nattach(friends_data)\n# === Data manipulation ====\nfriends_data[age>=22, ]##      name age height married\n## 2    adhi  23    170   FALSE\n## 3 aravind  22    185    TRUE\n# === End of data manipulation ====\n# Detach the data frame\ndetach(friends_data)\n# Add group column to friends_data\ndata<-c(\"BSc\", \"MSc\", \"Phd\", \"Btech\")\nfriends_data$degree <- data\nfriends_data##      name age height married degree\n## 1    asha  20    180    TRUE    BSc\n## 2    adhi  23    170   FALSE    MSc\n## 3 aravind  22    185    TRUE    Phd\n## 4    mary  21    169    TRUE  Btech\nroll_no<-c(234,235,236,238)\ncbind(friends_data, roll_no)##      name age height married degree roll_no\n## 1    asha  20    180    TRUE    BSc     234\n## 2    adhi  23    170   FALSE    MSc     235\n## 3 aravind  22    185    TRUE    Phd     236\n## 4    mary  21    169    TRUE  Btech     238\n# Following can be used when it is a numeric data frame\n\n# creating a numeric data frame\nc1<-c(3,4,5)\nc2<-c(7,8,9)\nc3<-c(11,12,13)\n\n# Creating matrix by binding column wise  \nex <- cbind(c1,c2,c3)\n\n# converting matrix to data frame\nex<-as.data.frame(ex)\nex##   c1 c2 c3\n## 1  3  7 11\n## 2  4  8 12\n## 3  5  9 13\nrowSums(ex)## [1] 21 24 27\ncolSums(ex)## c1 c2 c3 \n## 12 24 36\n# calculation in non numeric data frame on selected numeric columns\nattach(friends_data)\nsum(age)## [1] 86\nmean(age)## [1] 21.5apply(X, MARGIN, FUN)\nHere:\n  -x: an array or matrix\n-MARGIN:  take a value or range between 1 and 2 to define where to apply the function:\n  -MARGIN=1`: the manipulation is performed on rows\n-MARGIN=2`: the manipulation is performed on columns\n-MARGIN=c(1,2)` the manipulation is performed on rows and columns\n-FUN: tells which function to apply. Built functions like mean, median, sum, min, max and even user-defined functions can be applied>\napply(ex,2, mean)## c1 c2 c3 \n##  4  8 12\napply(ex,1, mean)## [1] 7 8 9"},{"path":"packages-and-libraries.html","id":"packages-and-libraries","chapter":"4 Packages and libraries","heading":"4 Packages and libraries","text":"","code":""},{"path":"packages-and-libraries.html","id":"packages","chapter":"4 Packages and libraries","heading":"4.1 Packages","text":"Packages organised collections R functions, data, compiled code. two type packages R.","code":""},{"path":"packages-and-libraries.html","id":"standard-packages","chapter":"4 Packages and libraries","heading":"4.2 Standard packages","text":"Standard packages come pre-installed R installations regarded part R source code. fundamental R functions found base packages, make possible perform common statistical graphical operations datasets. Examples standard packages include stats, graphics, grDevices, utils, datasets, methods base. functions available standard packages can used basic operations data set functions discussed earlier 3.","code":""},{"path":"importing-data-files.html","id":"importing-data-files","chapter":"5 Importing data files","heading":"5 Importing data files","text":"previous chapter discussed basics R\nprogramming including installation, launching, basic data types \narithmetic functions. , learn import data R. \nimportant ensure data well prepared importing\nR avoid errors.","code":""},{"path":"importing-data-files.html","id":"preparing-your-file","chapter":"5 Importing data files","heading":"5.1 Preparing your file","text":"File can prepared MS ExcelFile can prepared MS ExcelUse first row column headers (column names). Generally,\ncolumns represent variables.Use first row column headers (column names). Generally,\ncolumns represent variables.Use first column row names. Generally rows represent\nobservations.Use first column row names. Generally rows represent\nobservations.Make sure row name unique. case \nanalysis experiments , row name treatment name,\nrepeated replicationMake sure row name unique. case \nanalysis experiments , row name treatment name,\nrepeated replicationColumn names compatible R naming conventions.","code":""},{"path":"importing-data-files.html","id":"naming-conventions","chapter":"5 Importing data files","heading":"5.1.1 Naming conventions:","text":"Avoid names blank spaces. Bad column name Sepal width; Good\nconvention Sepal_widthAvoid names blank spaces. Bad column name Sepal width; Good\nconvention Sepal_widthAvoid names special symbols: ?, $, *, +, #, (, ), -, /, }, {,\n|, >, < etc. underscore can used.Avoid names special symbols: ?, $, *, +, #, (, ), -, /, }, {,\n|, >, < etc. underscore can used.Avoid beginning variable names number. Use letter instead.\nGood column names: obs_100m x100m. Bad column name: 100mAvoid beginning variable names number. Use letter instead.\nGood column names: obs_100m x100m. Bad column name: 100mColumn names must unique. Duplicated names allowed.Column names must unique. Duplicated names allowed.R case sensitive. means Name, NAME name, naMe \ntreated different.R case sensitive. means Name, NAME name, naMe \ntreated different.Avoid blank rows dataAvoid blank rows dataDelete comments fileDelete comments fileReplace missing values NA (denotes Available)Replace missing values NA (denotes Available)column containing date, use four digit format.\nGood format: 01/01/2016. Bad format: 01/01/16If column containing date, use four digit format.\nGood format: 01/01/2016. Bad format: 01/01/16A final good looking file\nFigure 5.1: example file\n","code":""},{"path":"importing-data-files.html","id":"saving-file","chapter":"5 Importing data files","heading":"5.1.2 Saving file","text":"recommend save file .csv (comma separated value file)\nformat.CSV?usual file save MS Excel saved XLS files XLSX\nfiles. Workbook files Microsoft Excel 97 2003 known \nXLS files. XLSX extension used later versions Excel. \ndata worksheets workbook, including formatting,\ncharts, graphics, calculations, , contained XLS \nXLSX file formats.Comma Separated Values (CSV) format plain text format \nvalues separated commas, whereas Excel Sheets binary file\nformat (XLS) contains information worksheets file,\nincluding content formatting. spreadsheet programme,\nincluding Microsoft Excel, Open Office, Google Sheets, etc., can open\nCSV files. straightforward text editor can also used open CSV\nfiles. straightforward compatible majority \nplatforms, prevalent well-liked file format storing\naccessing data. certain drawbacks simplicity.\nCSV files can contain single sheet without formatting \nformulas.CSV files supported almost data upload interfaces,\nExcel (XLS XLSX) file types preferable storing \ncomplicated data. CSV file format may advantageous \nintend move data platforms export import \ninterfaces.","code":""},{"path":"importing-data-files.html","id":"how-to-save-as-csv","chapter":"5 Importing data files","heading":"5.1.3 How to save as csv","text":"\"File name\" section \"Save \" tab, can select\n\"Save type\" change \"CSV (Comma delimited) (*.csv).\nFigure 5.2: save csv\n\nFigure 5.3: save csv (1)\n","code":""},{"path":"importing-data-files.html","id":"importing-data-set-in-rstudio","chapter":"5 Importing data files","heading":"5.2 Importing Data set in Rstudio","text":"import csv file Rstudioclick File click Import Dataset select Text (base)\nFigure 5.4: Importing data set\nSelect file click open\nFigure 5.5: Import Dataset dialogue box\nImport Dataset dialogue box can change name \ndataset Box Name. Heading radio button default\n‘yes’. Click import. dataset now imported ready \nwork .","code":""},{"path":"importing-data-files.html","id":"alternate-methods","chapter":"5 Importing data files","heading":"5.2.1 Alternate methods","text":"","code":""},{"path":"importing-data-files.html","id":"importing-csv-files","chapter":"5 Importing data files","heading":"5.2.1.1 Importing csv files","text":"Data can also imported using read.csv() function R.\nread.csv('path file')","code":"\n# example\n\nmy_data<-read.csv(file = 'data/iris.csv')\n\n# here now the data set iris.csv is stored in the name my_data\n\n# You can now directly do operations on the my_data\n\nsummary(my_data)##   Sepal_Length    Sepal_Width     Petal_length    Petal_Width   \n##  Min.   :4.600   Min.   :2.300   Min.   :1.300   Min.   :0.200  \n##  1st Qu.:5.050   1st Qu.:2.925   1st Qu.:1.450   1st Qu.:0.200  \n##  Median :6.300   Median :3.050   Median :4.600   Median :1.500  \n##  Mean   :5.907   Mean   :3.021   Mean   :3.873   Mean   :1.247  \n##  3rd Qu.:6.500   3rd Qu.:3.200   3rd Qu.:5.350   3rd Qu.:1.850  \n##  Max.   :7.100   Max.   :3.500   Max.   :6.000   Max.   :2.500  \n##                  NA's   :1                                      \n##    Species         \n##  Length:15         \n##  Class :character  \n##  Mode  :character  \n##                    \n##                    \n##                    \n## "},{"path":"importing-data-files.html","id":"importing-excel-files","chapter":"5 Importing data files","heading":"5.2.1.2 Importing excel files","text":"import xlsx file, need package xlsx","code":"library(xlsx)  \n\ndf <-read.xlsx(\"path/file.xlsx\", n)\n\n# n is n-th worksheet to import"},{"path":"importing-data-files.html","id":"accessing-the-variables","chapter":"5 Importing data files","heading":"5.3 Accessing the variables","text":"variables data can accessed using $ symbol data name","code":"\nmy_data<-read.csv(file = 'data/iris.csv')\n\n# Accessing variable Petal_length\n\nmy_data$Petal_length##  [1] 1.4 1.4 1.3 1.5 1.4 4.7 4.5 4.9 4.0 4.6 6.0 5.1 5.9 5.6 5.8\n# You can perform functions on them\n\nsummary(my_data$Petal_length)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   1.300   1.450   4.600   3.873   5.350   6.000"},{"path":"importing-data-files.html","id":"function-to-access-variables-easily","chapter":"5 Importing data files","heading":"5.3.1 Function to access variables easily","text":"Without using name data frame, can access variables data framework using attach() function R language. data framework attachment created attach() function removed using detach() function.database attached R search path. means database searched R evaluating variable, objects database can accessed simply giving names.","code":"\nmy_data<-read.csv(file = 'data/iris.csv')\n\n# Using function attach  \n\nattach(my_data)\n\n# Accessing variable Petal_length, now you can call variable name directly without using my_data\n\nPetal_length##  [1] 1.4 1.4 1.3 1.5 1.4 4.7 4.5 4.9 4.0 4.6 6.0 5.1 5.9 5.6 5.8\n# You can perform functions on them\n\nsummary(Petal_length)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   1.300   1.450   4.600   3.873   5.350   6.000\n# Using detach function\n\ndetach(my_data)"},{"path":"importing-data-files.html","id":"some-useful-functions","chapter":"5 Importing data files","heading":"5.4 Some useful functions","text":"","code":""},{"path":"importing-data-files.html","id":"str","chapter":"5 Importing data files","heading":"5.4.1 str()","text":"R object structures displayed str(). str() frequently used display list’s contents.used particularly data set huge.","code":"\nmy_data<-read.csv(file = 'data/iris.csv')  \n\n# Using str() function\n\nstr(my_data)## 'data.frame':    15 obs. of  5 variables:\n##  $ Sepal_Length: num  5.1 4.9 4.7 4.6 5 7 6.4 6.9 5.5 6.5 ...\n##  $ Sepal_Width : num  3.5 3 3.2 3.1 NA 3.2 3.2 3.1 2.3 2.8 ...\n##  $ Petal_length: num  1.4 1.4 1.3 1.5 1.4 4.7 4.5 4.9 4 4.6 ...\n##  $ Petal_Width : num  0.2 0.2 0.2 0.2 0.2 1.4 1.5 1.5 1.3 1.5 ...\n##  $ Species     : chr  \"setosa\" \"setosa\" \"setosa\" \"setosa\" ..."},{"path":"importing-data-files.html","id":"view","chapter":"5 Importing data files","heading":"5.5 View()","text":"Self assesmentCreate dataset excel 4 coloumns, save csv fileImport dataset R, rename my_dataCalculate summary my_data\n","code":"\nmy_data<-read.csv(file = 'data/iris.csv')  \n\n# Using str() function\n\nView(my_data)"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
